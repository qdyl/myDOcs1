import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,a as t,b as n}from"./app-b_Dxr_FD.js";const p={},i=n(`<h2 id="_00-ts简介" tabindex="-1"><a class="header-anchor" href="#_00-ts简介" aria-hidden="true">#</a> 00 TS简介</h2><p>略</p><h2 id="_01-ts开发环境搭建" tabindex="-1"><a class="header-anchor" href="#_01-ts开发环境搭建" aria-hidden="true">#</a> 01 TS开发环境搭建</h2><blockquote><p>ts 的编译器是使用 node 写的，所有需要先安装 node.js</p></blockquote><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h3><ul><li>安装 node.js</li><li>安装 typescript</li><li>编译 .ts 文件 : tsc hello.ts // 提示 c 是 compile 编译的意思</li></ul><h2 id="_02-ts的类型声明" tabindex="-1"><a class="header-anchor" href="#_02-ts的类型声明" aria-hidden="true">#</a> 02 TS的类型声明</h2><h3 id="基础变量" tabindex="-1"><a class="header-anchor" href="#基础变量" aria-hidden="true">#</a> 基础变量</h3><ul><li>语法： let 变量名:类型 = 值 或 let 变量名:类型</li><li>细节说明： <ul><li>1、如果变量的声明和赋值是同时进行的，TS 可以自动对变量进行类型推论。</li></ul></li><li>练习：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 方式1：</span>
<span class="token keyword">let</span> name1<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 方式2：</span>
<span class="token keyword">let</span> name2<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>
name2 <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>

<span class="token comment">// 细节说明：上面的方式1，可以简写成如下的方式。</span>
<span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>  <span class="token comment">//  TS 会根据赋的值 推断 name1 为 string 类型，就相当于 let name1:string = &#39;张三&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数的参数-和-函数返回值" tabindex="-1"><a class="header-anchor" href="#函数的参数-和-函数返回值" aria-hidden="true">#</a> 函数的参数 和 函数返回值</h3><ul><li>语法：</li><li>细节说明：</li><li>练习：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>n1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>n2<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>类型声明 <ul><li>通过类型声明可以指定 TS 中的变量（参数、形参）的类型</li><li>其他：略</li></ul></li><li>自动类型判断 <ul><li>如果你的变量的声明和赋值是同时进行的，可以省略掉类型声明</li><li>其他：略</li></ul></li></ul><h2 id="_03-ts中的类型1" tabindex="-1"><a class="header-anchor" href="#_03-ts中的类型1" aria-hidden="true">#</a> 03 TS中的类型1</h2><h3 id="ts中的所有类型" tabindex="-1"><a class="header-anchor" href="#ts中的所有类型" aria-hidden="true">#</a> TS中的所有类型</h3><table><thead><tr><th>类型</th><th>例子</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><strong>基本类型</strong></td><td>-</td><td>-</td><td>xx</td></tr><tr><td>number</td><td>let n:number; <br> 或 let n:number = 1; <br>或 let n=1;</td><td>数字</td><td>xx</td></tr><tr><td>string</td><td>-</td><td>字符</td><td>xx</td></tr><tr><td>boolean</td><td>-</td><td>布尔</td><td>xx</td></tr><tr><td>字面量</td><td>let str:&#39;hello&#39;; <br> let sex:&#39;male&#39; | &#39;female&#39;;</td><td>xxx</td><td>xx</td></tr><tr><td><strong>any</strong></td><td>显示any： let n:any = &#39;hello&#39;; <br> 隐式any： let n;</td><td>任意</td><td>any类型的值可以赋值给任意变量，而不会报错 <br>（所以也不推荐使用any）</td></tr><tr><td>unknow</td><td>-</td><td>未知类型</td><td>类型安全的 any</td></tr><tr><td>void</td><td>-</td><td>xxx</td><td>多用于函数返回空值</td></tr><tr><td>never</td><td>-</td><td>xxx</td><td>多用于函数报错</td></tr><tr><td>xxx</td><td>-</td><td>xxx</td><td>xx</td></tr><tr><td>xxx</td><td>-</td><td>xxx</td><td>xx</td></tr></tbody></table><h3 id="细节说明" tabindex="-1"><a class="header-anchor" href="#细节说明" aria-hidden="true">#</a> 细节说明</h3><h4 id="any-和-unkonw-细节说明" tabindex="-1"><a class="header-anchor" href="#any-和-unkonw-细节说明" aria-hidden="true">#</a> any 和 unkonw 细节说明</h4><ul><li>any 类型的值可以赋值给任意变量，而不会报错；但是 unknow 类型的值不能赋值给任意变量 <img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240410001532552.png" alt="image-20240410001532552" loading="lazy"></li><li>unknow 类型的值，如何赋值给其他变量 <ul><li>方式1：使用 typeof 条件判断</li><li>方式2：使用 类型断言 （有两种语法）</li></ul></li><li>总结：能使用 unkonw 就使用 unkonw ,尽量不使用 any</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如何将  unkonw 类型的字，赋值给其他变量</span>
<span class="token comment">// 方式1：使用 typeof 条件判断</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> e <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    s <span class="token operator">=</span> e
<span class="token punctuation">}</span>

<span class="token comment">// 方式2：类型断言 ,可以告诉解析器变量的实际类型</span>
s <span class="token operator">=</span> e <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token comment">// 方式2 的另一种写法</span>
s <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> e

<span class="token comment">// 总结：两种语法</span>
<span class="token comment">// 语法2.1 ：  变量 as 类型</span>
<span class="token comment">// 语法2.2 ： &lt;类型&gt;变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=n(`<figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240410002903588.png" alt="image-20240410002903588" tabindex="0" loading="lazy"><figcaption>image-20240410002903588</figcaption></figure><h4 id="void-和-never-细节说明-函数返回值-细节说明" tabindex="-1"><a class="header-anchor" href="#void-和-never-细节说明-函数返回值-细节说明" aria-hidden="true">#</a> void 和 never 细节说明 （函数返回值，细节说明）</h4><ul><li>函数在没有指明返回值的时候，TS会自动推断函数的返回值。</li><li>函数在没有返回值的时候，有几种写法</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 函数在没有返回值的几种写法：</span>
<span class="token comment">// 写法1：</span>
<span class="token keyword">function</span> <span class="token function">fn0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 写法2：</span>
<span class="token keyword">function</span> <span class="token function">fn00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
   
<span class="token punctuation">}</span>

<span class="token comment">// 写法3：</span>
<span class="token keyword">function</span> <span class="token function">fn000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>

<span class="token comment">// 写法4： // 注意，这种写法好型会报错。</span>
<span class="token comment">// function fn0000():void{</span>
<span class="token comment">//     return null</span>
<span class="token comment">// }</span>


<span class="token comment">// nver  表示 永远不会返回结果</span>
<span class="token comment">// never 常用于函数报错，never用的比较少。</span>
<span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">never</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;报错了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240410005148591.png" alt="image-20240410005148591" loading="lazy"><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240410005657054.png" alt="image-20240410005657054" loading="lazy"></p><h2 id="_04-ts中的类型2" tabindex="-1"><a class="header-anchor" href="#_04-ts中的类型2" aria-hidden="true">#</a> 04 TS中的类型2</h2><h3 id="思考-如何限制一个对象" tabindex="-1"><a class="header-anchor" href="#思考-如何限制一个对象" aria-hidden="true">#</a> 思考：如何限制一个对象？</h3><blockquote><p>限制对象中的属性，而不是限制一个变量是不是一个对象。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Object 表示一个对象</span>
<span class="token keyword">let</span> a<span class="token operator">:</span>object<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240410010733016.png" alt="image-20240410010733016" tabindex="0" loading="lazy"><figcaption>image-20240410010733016</figcaption></figure><h3 id="对象中属性的限制" tabindex="-1"><a class="header-anchor" href="#对象中属性的限制" aria-hidden="true">#</a> 对象中属性的限制</h3><ul><li>可选属性 ?</li><li>任意类型的属性 [propName:string]:any</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 可选属性  </span>
<span class="token keyword">let</span> b<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 

b <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">}</span>

<span class="token comment">// 任意属性  [propName:string]:any 表示任意类型的属性值</span>
<span class="token keyword">let</span> c<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token punctuation">[</span>propName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">}</span>

c <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数的限制" tabindex="-1"><a class="header-anchor" href="#函数的限制" aria-hidden="true">#</a> 函数的限制</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 设置函数结构的类型声明</span>
<span class="token comment">// 语法： (形参:类型, 形参:类型,...)=&gt;返回值</span>

<span class="token keyword">let</span> <span class="token function-variable function">d</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token builtin">number</span>

<span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-类型" tabindex="-1"><a class="header-anchor" href="#array-类型" aria-hidden="true">#</a> array 类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// string[] 表示字符串数组</span>
<span class="token comment">// 方式1：</span>
<span class="token keyword">let</span> e<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// 方式2：</span>
<span class="token keyword">let</span> g<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>
g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 元组：就是固定长度的数组</span>

<span class="token keyword">let</span> h<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">]</span>

h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h3><blockquote><p>在多个值进行选择的时候，就适合使用 枚举</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> i<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>gender<span class="token operator">:</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">}</span>
i <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span>
  gender<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>gender <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 枚举</span>
Enum Gender<span class="token punctuation">{</span>
  Male <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  Femali <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> i2<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>gender<span class="token operator">:</span>Gender<span class="token punctuation">}</span>
i2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
  gender<span class="token operator">:</span>Gender<span class="token punctuation">.</span>Male <span class="token comment">// Gender.Male 一看就是男</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i2<span class="token punctuation">.</span>gender <span class="token operator">===</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span> <span class="token comment">// Gender.Male 非常清晰，一看就是 男</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表示同时" tabindex="-1"><a class="header-anchor" href="#表示同时" aria-hidden="true">#</a> &amp; 表示同时</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// &amp; 表示同时</span>
<span class="token keyword">let</span> j <span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 表明 j 这个对象要有两个属性</span>
j <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-类型别名" tabindex="-1"><a class="header-anchor" href="#type-类型别名" aria-hidden="true">#</a> type : 类型别名</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类型别名 true</span>
<span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> k<span class="token operator">:</span>myType<span class="token punctuation">;</span> <span class="token comment">// 就相当于 k:string</span>

<span class="token comment">// 但是上面的例子，实际中用的很少</span>
<span class="token keyword">type</span> <span class="token class-name">myType2</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span>
<span class="token keyword">let</span> k2<span class="token operator">:</span>myType2<span class="token punctuation">;</span>
k2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-08-ts的编译选项" tabindex="-1"><a class="header-anchor" href="#_05-08-ts的编译选项" aria-hidden="true">#</a> 05-08 TS的编译选项</h2><h3 id="tsc-语法" tabindex="-1"><a class="header-anchor" href="#tsc-语法" aria-hidden="true">#</a> tsc 语法</h3><ul><li>tsc xxx.ts -w // 监听单个文件的变化，实时编译</li><li>tsc</li></ul><blockquote><p>需要在根目录下创建一个 tsconfig.json 文件，这个 json 文件比较特殊，可以写注释</p></blockquote><ul><li>在文件夹下 执行 tsc ,会编译这个文件下的所有 .ts 文件</li><li>在文件夹下 执行 tsc -w , 会实时编一个这个文件夹下的所有 .ts 文件</li></ul><h3 id="tsconfig-配置项" tabindex="-1"><a class="header-anchor" href="#tsconfig-配置项" aria-hidden="true">#</a> tsconfig 配置项</h3><ul><li><strong>strict</strong>： 所有严格检查的总开关</li><li>include： 要编译的文件</li><li>exclude： 要排除的文件</li><li>extends： 定义被继承的配置文件</li><li>files： 编译的文件列表</li><li>compilerOptions <ul><li>target： 支持的编译版本</li><li>module： 指定要使用的模块化的规范</li><li><strong>outDir</strong>： 输出目录</li><li>outFile： 将全局作用域中的代码合并到同一个文件中</li><li>allowJs： 是否对 js 文件进行编译</li><li>checkJs： 是否检查 js 文件的语法</li><li>removeComments： 编译的时候，是否移除注释</li><li>noEmit： 不生成编译后的文件</li><li><strong>noEmitOnError</strong>： 当有错误的时候，不生成编译后的文件</li><li>alwaysStrict： 编译后的 js 文件，是否启动严格模式</li><li>noImplictAny： 隐式 any 类型检测</li><li>noImplictThis： 不确定的 this 检测</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">// tsconfig.json 是 .ts 编译器的配置文件， ts 编译器可以根据它的信息来对代码进行编译</span>

    <span class="token comment">/* include: 用来指定哪些文件需要被编译
        路径： ** 便是任意目录
                * 表示任意文件
    */</span>
    <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> 
        <span class="token string">&quot;./src/**?*&quot;</span>   
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// target 用来描述 ts 被编译为的 ES 的版本: &#39;es5&#39;, &#39;es6&#39;, &#39;es2015&#39;, &#39;es2016&#39;, &#39;es2017&#39;, &#39;es2018&#39;, &#39;es2019&#39;, &#39;es2020&#39;, &#39;es2021&#39;, &#39;es2022&#39;, &#39;esnext&#39;. </span>
        <span class="token property">&quot;target&quot;</span><span class="token operator">:</span><span class="token string">&quot;ES6&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// module ： 指定要使用的模块化的规范 : &#39;none&#39;, &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39;, &#39;es6&#39;, &#39;es2015&#39;, &#39;es2020&#39;, &#39;es2022&#39;, &#39;esnext&#39;, &#39;node16&#39;, &#39;nodenext&#39;, &#39;preserve&#39;.</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 推荐 es6 或 es2015(两者是一样的)</span>
        <span class="token comment">// lib : 用来指定项目中药使用的苦</span>
        <span class="token comment">/*
         &#39;es5&#39;, &#39;es6&#39;, &#39;es2015&#39;, &#39;es7&#39;, &#39;es2016&#39;, &#39;es2017&#39;, &#39;es2018&#39;, &#39;es2019&#39;, &#39;es2020&#39;, &#39;es2021&#39;, &#39;es2022&#39;, &#39;es2023&#39;, &#39;esnext&#39;, &#39;dom&#39;, &#39;dom.iterable&#39;, &#39;dom.asynciterable&#39;, &#39;webworker&#39;, &#39;webworker.importscripts&#39;, &#39;webworker.iterable&#39;, &#39;webworker.asynciterable&#39;, &#39;scripthost&#39;, &#39;es2015.core&#39;, &#39;es2015.collection&#39;, &#39;es2015.generator&#39;, &#39;es2015.iterable&#39;, &#39;es2015.promise&#39;, &#39;es2015.proxy&#39;, &#39;es2015.reflect&#39;, &#39;es2015.symbol&#39;, &#39;es2015.symbol.wellknown&#39;, &#39;es2016.array.include&#39;, &#39;es2016.intl&#39;, &#39;es2017.date&#39;, &#39;es2017.object&#39;, &#39;es2017.sharedmemory&#39;, &#39;es2017.string&#39;, &#39;es2017.intl&#39;, &#39;es2017.typedarrays&#39;, &#39;es2018.asyncgenerator&#39;, &#39;es2018.asynciterable&#39;, &#39;es2018.intl&#39;, &#39;es2018.promise&#39;, &#39;es2018.regexp&#39;, &#39;es2019.array&#39;, &#39;es2019.object&#39;, &#39;es2019.string&#39;, &#39;es2019.symbol&#39;, &#39;es2019.intl&#39;, &#39;es2020.bigint&#39;, &#39;es2020.date&#39;, &#39;es2020.promise&#39;, &#39;es2020.sharedmemory&#39;, &#39;es2020.string&#39;, &#39;es2020.symbol.wellknown&#39;, &#39;es2020.intl&#39;, &#39;es2020.number&#39;, &#39;es2021.promise&#39;, &#39;es2021.string&#39;, &#39;es2021.weakref&#39;, &#39;es2021.intl&#39;, &#39;es2022.array&#39;, &#39;es2022.error&#39;, &#39;es2022.intl&#39;, &#39;es2022.object&#39;, &#39;es2022.sharedmemory&#39;, &#39;es2022.string&#39;, &#39;es2022.regexp&#39;, &#39;es2023.array&#39;, &#39;es2023.collection&#39;, &#39;esnext.array&#39;, &#39;esnext.collection&#39;, &#39;esnext.symbol&#39;, &#39;esnext.asynciterable&#39;, &#39;esnext.intl&#39;, &#39;esnext.disposable&#39;, &#39;esnext.bigint&#39;, &#39;esnext.string&#39;, &#39;esnext.promise&#39;, &#39;esnext.weakref&#39;, &#39;esnext.decorators&#39;, &#39;esnext.object&#39;, &#39;decorators&#39;, &#39;decorators.legacy&#39;.
        */</span>
        <span class="token comment">// &quot;lib&quot;:[&quot;es6&quot;,&quot;dom&quot;], // 一般不用设置</span>
        
        <span class="token comment">// outdir: 用来指定编译后文件所在的目录</span>
        <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// outFile: 将代码合并为一个文件</span>
        <span class="token comment">// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span>

        <span class="token comment">// allowJs ： 是否对 .js 文件进行编译。默认是false</span>
        <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// checkJS: 是否检查 js 代码是否符合语法规范，默认为 false</span>
        <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 是否移除样式，默认值为 false</span>
        <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 不生成编译后的文件 ，默认为 false</span>
        <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token comment">// 当 有错误的时候，就不生成编译后的文件，默认为 false</span>
        <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token comment">// 用来设置编译后的文件是否使用严格模式，默认 false</span>
        <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 是否检查 隐式 any ；类型</span>
        <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 不允许不明确类型的 this</span>
        <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 严格检测空置</span>
        <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 所有严格的总开关，会将所有的严格开关，全部打开。</span>
        <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_09-11-webpack-打包ts-代码" tabindex="-1"><a class="header-anchor" href="#_09-11-webpack-打包ts-代码" aria-hidden="true">#</a> 09-11 webpack 打包ts 代码</h2>`,35);function l(c,r){return a(),e("div",null,[i,t(" ![image-20240410002441756](https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240410002441756.png) "),o])}const k=s(p,[["render",l],["__file","page2.html.vue"]]);export{k as default};
