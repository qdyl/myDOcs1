import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,b as e}from"./app-b_Dxr_FD.js";const t={},i=e(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="原始数据类型" tabindex="-1"><a class="header-anchor" href="#原始数据类型" aria-hidden="true">#</a> 原始数据类型</h3><h4 id="布尔值、数值、字符串" tabindex="-1"><a class="header-anchor" href="#布尔值、数值、字符串" aria-hidden="true">#</a> 布尔值、数值、字符串</h4><p>注意： 在 TypeScript 中，boolean 是 javascript 中的基本类型，而 Boolean 是 JavaScript 中的构造函数。其他基本类型也一样，不在赘述。 <img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240408103918554.png" alt="image-20240408103918554" loading="lazy"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> isDone<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// boolean 类型</span>

<span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 数值类型</span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空值" tabindex="-1"><a class="header-anchor" href="#空值" aria-hidden="true">#</a> 空值</h4><ul><li>定义：JavaScript 中没有 （Void）的概念， 在 TypeScript 中，可以用 void 表示没有任何返回值的函数</li><li>例子：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello,ts&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null （只在 --strictNullChecks 未指定时）：</span>
<span class="token keyword">let</span> unusable<span class="token operator">:</span><span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> Null 和 Undefined</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型</span>
<span class="token keyword">let</span> u<span class="token operator">:</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> n<span class="token operator">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> <br> 与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的的变量，可以赋值给 number 类型的变量。 而 void 类型的变量不能赋值给 number 类型的变量。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 这样不会报错  （提示：这个在严格模式下，还是会报错的）</span>
<span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token comment">// 这样也不会报错  （提示：这个在严格模式下，还是会报错的） 不能将类型“undefined”分配给类型“number”</span>
<span class="token keyword">let</span> u<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>

<span class="token comment">// 而 void 类型的变量不能赋值给 number 类型的变量</span>
<span class="token keyword">let</span> v<span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment">// // Type &#39;void&#39; is not assignable to type &#39;number&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240408103845745.png" alt="image-20240408103845745" tabindex="0" loading="lazy"><figcaption>image-20240408103845745</figcaption></figure><h3 id="任意值" tabindex="-1"><a class="header-anchor" href="#任意值" aria-hidden="true">#</a> 任意值</h3><h4 id="什么是任意值类型" tabindex="-1"><a class="header-anchor" href="#什么是任意值类型" aria-hidden="true">#</a> 什么是任意值类型</h4><ul><li>定义：变量为 any 类型，则允许别赋值为任意类型</li><li>语法： let 变量:any; 或 let 变量:any = 值</li><li>例子 + 细节说明：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果是一个普通的类型，在赋值过程中改变类型是不被允许的</span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 不能将类型“number”分配给类型“string”</span>

<span class="token comment">// 但是是 any 类型，则允许别赋值为任意类型</span>
<span class="token keyword">let</span> str2<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
str2 <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任意值的属性和方法" tabindex="-1"><a class="header-anchor" href="#任意值的属性和方法" aria-hidden="true">#</a> 任意值的属性和方法</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在任意值上访问任何属性都是允许的</span>

<span class="token comment">// 也允许调用任何方法</span>
<span class="token keyword">let</span> anything1<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;any&#39;</span>
anything1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
anything1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以认为：声明一个变量为任意值后，对它的任何操作，返回的内容的类型都是任意值。</p><h4 id="未声明类型的变量" tabindex="-1"><a class="header-anchor" href="#未声明类型的变量" aria-hidden="true">#</a> 未声明类型的变量</h4><blockquote><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> something<span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span>
something <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
something<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 相当于如下：</span>
<span class="token keyword">let</span> something<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span>
something <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
something<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型推论" tabindex="-1"><a class="header-anchor" href="#类型推论" aria-hidden="true">#</a> 类型推论</h3><h4 id="什么是类型推论" tabindex="-1"><a class="header-anchor" href="#什么是类型推论" aria-hidden="true">#</a> 什么是类型推论</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 以下代码虽然没有指定类型，但是会在编译的时候报错</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 不能将类型“number”分配给类型“string”</span>

<span class="token comment">// 实际上，它等价于</span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
str <span class="token operator">=</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 会在没有明确的指定类型的时候推断出一个类型，这就是类型推论。</p><p><strong>注意：</strong> 如果定义的时候没有赋值，不管之后有没有赋值，都会被推断为 any 类型而完全不被类型检查。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str<span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
str <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型 ？？</h3><ul><li>定义：联合类型 （Union Types）表示取值可以为多种类型中的一种。</li><li>语法：联合类型使用 | 分割每个类型</li><li>细节说明：见下方</li><li>例子 + 细节说明：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myNumber<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 允许 myNumber 的类型是 string 或者 number ,但是不能是其他类型。</span>
myNumber <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span>
myNumber <span class="token operator">=</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问联合类型的属性和方法" tabindex="-1"><a class="header-anchor" href="#访问联合类型的属性和方法" aria-hidden="true">#</a> 访问联合类型的属性和方法</h4><ul><li>细节说明： <ul><li>当TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问联合类型的所有类型里共有的属性或方法</li><li>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型</li></ul></li><li>例子：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 细节 1 说明：</span>
<span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span>something<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 类型“string | number”上不存在属性“length”。类型“number”上不存在属性“length”</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getString2</span><span class="token punctuation">(</span>something<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问 string 和 number 的共有属性是没有问题的。</span>
<span class="token punctuation">}</span>

<span class="token comment">// 细节 2 说明：</span>
<span class="token keyword">let</span> myNumber<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">;</span>
myNumber<span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//  被推断成了 string，访问它的 length 属性不会报错</span>

myNumber<span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 类型“number”上不存在属性“length”。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240408113322485.png" alt="image-20240408113322485" loading="lazy"><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240408113251580.png" alt="image-20240408113251580" loading="lazy"></p><h3 id="对象的类型-接口" tabindex="-1"><a class="header-anchor" href="#对象的类型-接口" aria-hidden="true">#</a> 对象的类型--接口</h3><h3 id="数组的类型" tabindex="-1"><a class="header-anchor" href="#数组的类型" aria-hidden="true">#</a> 数组的类型 ?</h3><h3 id="函数的类型" tabindex="-1"><a class="header-anchor" href="#函数的类型" aria-hidden="true">#</a> 函数的类型 ？</h3><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言？</h3><h3 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件" aria-hidden="true">#</a> 声明文件？</h3><h3 id="内置对象" tabindex="-1"><a class="header-anchor" href="#内置对象" aria-hidden="true">#</a> 内置对象 ？</h3><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><h3 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名？</h3><h3 id="字符串字面量类型" tabindex="-1"><a class="header-anchor" href="#字符串字面量类型" aria-hidden="true">#</a> 字符串字面量类型 ？</h3><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组 ？</h3><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举 ？</h3><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类 ？</h3><h3 id="类与接口" tabindex="-1"><a class="header-anchor" href="#类与接口" aria-hidden="true">#</a> 类与接口 ？</h3><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型 ？</h3><h3 id="声明合并" tabindex="-1"><a class="header-anchor" href="#声明合并" aria-hidden="true">#</a> 声明合并 ？</h3><h3 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读" aria-hidden="true">#</a> 扩展阅读</h3><h2 id="工程" tabindex="-1"><a class="header-anchor" href="#工程" aria-hidden="true">#</a> 工程</h2><h3 id="代码检查" tabindex="-1"><a class="header-anchor" href="#代码检查" aria-hidden="true">#</a> 代码检查</h3><h3 id="编译选项" tabindex="-1"><a class="header-anchor" href="#编译选项" aria-hidden="true">#</a> 编译选项</h3>`,55),p=[i];function l(o,c){return s(),a("div",null,p)}const u=n(t,[["render",l],["__file","page1.html.vue"]]);export{u as default};
