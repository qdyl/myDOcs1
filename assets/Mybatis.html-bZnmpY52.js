import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as h,a as d,b as a}from"./app-LQCnbNa2.js";const i={},t=a('<h2 id="mybatis-简介" tabindex="-1"><a class="header-anchor" href="#mybatis-简介" aria-hidden="true">#</a> MyBatis 简介</h2><h3 id="简介-历史" tabindex="-1"><a class="header-anchor" href="#简介-历史" aria-hidden="true">#</a> 简介|历史</h3><h3 id="特性-对比" tabindex="-1"><a class="header-anchor" href="#特性-对比" aria-hidden="true">#</a> 特性|对比</h3><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载" aria-hidden="true">#</a> 下载</h3><h2 id="搭建框架" tabindex="-1"><a class="header-anchor" href="#搭建框架" aria-hidden="true">#</a> 搭建框架</h2><h2 id="补充-mapper接口和映射文件" tabindex="-1"><a class="header-anchor" href="#补充-mapper接口和映射文件" aria-hidden="true">#</a> 补充：mapper接口和映射文件</h2><blockquote><p>MyBatis 中的 mapper 接口相当于以前的 dao,但是区别在于，mapper接口仅仅是接口，我们不需要提供实现类。</p></blockquote><h3 id="orm-object-relation-mapping-对象关系映射" tabindex="-1"><a class="header-anchor" href="#orm-object-relation-mapping-对象关系映射" aria-hidden="true">#</a> ORM(Object Relation Mapping) 对象关系映射</h3><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table><h3 id="开发总结" tabindex="-1"><a class="header-anchor" href="#开发总结" aria-hidden="true">#</a> 开发总结</h3><ul><li>先写 mapper 接口，再写 映射文件</li><li>映射文件的 namespace 要和 mapper 接口的全类名保持一致</li><li>映射文件的 sql 语句 的id 要和 mapper 接口的方法名保持一致</li><li>如下代码的本质：就是调用sql语句</li></ul><blockquote><p>int result = sqlSession.insert(&quot;com.atguigu.mybatis.mapper.UserMapper.insertUser&quot;);</p></blockquote><h2 id="mybatis-核心配置文件配置" tabindex="-1"><a class="header-anchor" href="#mybatis-核心配置文件配置" aria-hidden="true">#</a> MyBatis 核心配置文件配置</h2><h3 id="environment" tabindex="-1"><a class="header-anchor" href="#environment" aria-hidden="true">#</a> environment</h3><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> properties</h3><h3 id="typealiases" tabindex="-1"><a class="header-anchor" href="#typealiases" aria-hidden="true">#</a> typeAliases</h3><h3 id="mappers" tabindex="-1"><a class="header-anchor" href="#mappers" aria-hidden="true">#</a> mappers</h3><h3 id="在-idea-中配置-mybatis-核心配置文件" tabindex="-1"><a class="header-anchor" href="#在-idea-中配置-mybatis-核心配置文件" aria-hidden="true">#</a> 在 idea 中配置 mybatis 核心配置文件</h3><h2 id="获取参数值的方式" tabindex="-1"><a class="header-anchor" href="#获取参数值的方式" aria-hidden="true">#</a> 获取参数值的方式</h2><h3 id="两种方式-和" tabindex="-1"><a class="header-anchor" href="#两种方式-和" aria-hidden="true">#</a> 两种方式 ${} 和 #{}</h3><h3 id="案例1-单个字面量形式" tabindex="-1"><a class="header-anchor" href="#案例1-单个字面量形式" aria-hidden="true">#</a> 案例1：单个字面量形式</h3><h3 id="案例2-多个字面量形式" tabindex="-1"><a class="header-anchor" href="#案例2-多个字面量形式" aria-hidden="true">#</a> 案例2：多个字面量形式</h3><h3 id="案例3-从map集合中获取参数" tabindex="-1"><a class="header-anchor" href="#案例3-从map集合中获取参数" aria-hidden="true">#</a> 案例3：从map集合中获取参数</h3><h3 id="案例4-从实体类user中获取参数" tabindex="-1"><a class="header-anchor" href="#案例4-从实体类user中获取参数" aria-hidden="true">#</a> 案例4：从实体类User中获取参数</h3><h3 id="案例5-使用注解-param" tabindex="-1"><a class="header-anchor" href="#案例5-使用注解-param" aria-hidden="true">#</a> 案例5：使用注解 @param()</h3><h3 id="案例1-5总结" tabindex="-1"><a class="header-anchor" href="#案例1-5总结" aria-hidden="true">#</a> 案例1-5总结</h3>',26),n=a('<h2 id="crud" tabindex="-1"><a class="header-anchor" href="#crud" aria-hidden="true">#</a> CRUD</h2><h3 id="常规查询" tabindex="-1"><a class="header-anchor" href="#常规查询" aria-hidden="true">#</a> 常规查询</h3><h4 id="查询2-1条实体类、多条list" tabindex="-1"><a class="header-anchor" href="#查询2-1条实体类、多条list" aria-hidden="true">#</a> 查询2：1条实体类、多条list</h4><h4 id="查询2-单行单列的数据" tabindex="-1"><a class="header-anchor" href="#查询2-单行单列的数据" aria-hidden="true">#</a> 查询2：单行单列的数据</h4><h4 id="查询3-把1条数据查询为-map-集合" tabindex="-1"><a class="header-anchor" href="#查询3-把1条数据查询为-map-集合" aria-hidden="true">#</a> 查询3：把1条数据查询为 map 集合</h4><h4 id="查询4-把-多-条数据查询为-map-集合" tabindex="-1"><a class="header-anchor" href="#查询4-把-多-条数据查询为-map-集合" aria-hidden="true">#</a> 查询4：把 多 条数据查询为 map 集合</h4><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h3><h4 id="模糊查询1" tabindex="-1"><a class="header-anchor" href="#模糊查询1" aria-hidden="true">#</a> 模糊查询1：</h4><h4 id="模糊查询2" tabindex="-1"><a class="header-anchor" href="#模糊查询2" aria-hidden="true">#</a> 模糊查询2：</h4><h3 id="批量删除" tabindex="-1"><a class="header-anchor" href="#批量删除" aria-hidden="true">#</a> 批量删除</h3><h3 id="动态设置表名" tabindex="-1"><a class="header-anchor" href="#动态设置表名" aria-hidden="true">#</a> 动态设置表名</h3><h3 id="获取自增的主键" tabindex="-1"><a class="header-anchor" href="#获取自增的主键" aria-hidden="true">#</a> 获取自增的主键</h3><h2 id="自定义映射" tabindex="-1"><a class="header-anchor" href="#自定义映射" aria-hidden="true">#</a> 自定义映射</h2><h3 id="处理多对一的三种方式" tabindex="-1"><a class="header-anchor" href="#处理多对一的三种方式" aria-hidden="true">#</a> 处理多对一的三种方式</h3><h3 id="处理一对多的两种方式" tabindex="-1"><a class="header-anchor" href="#处理一对多的两种方式" aria-hidden="true">#</a> 处理一对多的两种方式</h3><h2 id="动态-sql" tabindex="-1"><a class="header-anchor" href="#动态-sql" aria-hidden="true">#</a> 动态 SQL</h2><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h2><h2 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程" aria-hidden="true">#</a> 逆向工程</h2><h2 id="分页插件" tabindex="-1"><a class="header-anchor" href="#分页插件" aria-hidden="true">#</a> 分页插件</h2>',19);function s(c,o){return r(),h("div",null,[t,d(" ## 实现 CRUD ，改成 查询 "),n])}const p=e(i,[["render",s],["__file","Mybatis.html.vue"]]);export{p as default};
