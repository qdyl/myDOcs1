import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as d,c as h,e,f as a,d as t,w as c,b as s}from"./app-xMrARyrX.js";const l={},g=s('<h2 id="本地-js-调试" tabindex="-1"><a class="header-anchor" href="#本地-js-调试" aria-hidden="true">#</a> 本地 js 调试</h2><p>=200x110</p><h3 id="vscode-调试-html-中引入-的-js" tabindex="-1"><a class="header-anchor" href="#vscode-调试-html-中引入-的-js" aria-hidden="true">#</a> vscode 调试 html 中引入 的 js</h3><figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240321165034789.png" alt="image-20240321165034789" width="200" height="110" tabindex="0" loading="lazy"><figcaption>image-20240321165034789</figcaption></figure><figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/113662363354158333961558966588555556933888856895662358952ssss1.gif" alt="113662363354158333961558966588555556933888856895662358952ssss1" width="200" height="110" tabindex="0" loading="lazy"><figcaption>113662363354158333961558966588555556933888856895662358952ssss1</figcaption></figure><h3 id="vscode-调试-vue-打包后的-js" tabindex="-1"><a class="header-anchor" href="#vscode-调试-vue-打包后的-js" aria-hidden="true">#</a> vscode 调试 vue 打包后的 js</h3><h3 id="vscode-调试-开发环境的-vue-文件" tabindex="-1"><a class="header-anchor" href="#vscode-调试-开发环境的-vue-文件" aria-hidden="true">#</a> vscode 调试 开发环境的 .vue 文件</h3><blockquote><p>问题：Vue.js is detected on this page. Open DevTools and look for the Vue panel</p></blockquote><p><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240325014038493.png" alt="image-20240325014038493" loading="lazy"> 配置 vue-devtools</p><h2 id="线上-js-调试" tabindex="-1"><a class="header-anchor" href="#线上-js-调试" aria-hidden="true">#</a> 线上 js 调试</h2>',10),u={href:"https://juejin.cn/post/7156838915859562509",target:"_blank",rel:"noopener noreferrer"},m=e("h3",{id:"具体步骤",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#具体步骤","aria-hidden":"true"},"#"),a(" 具体步骤")],-1),p=e("p",null,[e("strong",null,"1、生成 sourcemap")],-1),f=e("blockquote",null,null,-1),_=e("p",null,[e("strong",null,"2、关联 sourcemap")],-1),x=e("blockquote",null,[e("p",null,"需要在文件末尾加上 //# sourceMappingURL=xxx.js.map 的代码。 需要借助 charles 的断点调试功能 或 fiddler 断点调试。")],-1),b=s('<h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><h3 id="switchyomega-charles插件-与-fiddler-的区别" tabindex="-1"><a class="header-anchor" href="#switchyomega-charles插件-与-fiddler-的区别" aria-hidden="true">#</a> SwitchyOmega + charles插件 与 Fiddler 的区别</h3><blockquote><p>是的，Fiddler 是一个功能强大的网络调试工具，它包含了类似 SwitchyOmega 和 Charles 插件的核心功能，包括请求拦截和断点功能。通过 Fiddler，用户可以拦截和查看计算机与互联网之间的网络通信数据，进行调试、分析和修改请求。Fiddler 提供了丰富的功能和工具，帮助开发者更好地理解和调试网络应用程序。</p></blockquote><figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240321145615238.png" alt="image-20240321145615238" tabindex="0" loading="lazy"><figcaption>image-20240321145615238</figcaption></figure>',4);function v(j,k){const o=i("ExternalLinkIcon"),n=i("RouterLink");return d(),h("div",null,[g,e("p",null,[a("参考链接："),e("a",u,[a("如何让调试线上 JS 报错像调试本地源码一样优雅？"),t(o)])]),m,p,f,_,x,e("p",null,[a("参考链接："),t(n,{to:"/WebEng/UI_Library/others/page3.html#%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E6%8D%A2"},{default:c(()=>[a("fiddler 断点调试")]),_:1})]),b])}const q=r(l,[["render",v],["__file","page1.html.vue"]]);export{q as default};
