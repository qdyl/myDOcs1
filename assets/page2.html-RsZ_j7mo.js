import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as i,b as n}from"./app-hRge2LQl.js";const r={},d=n('<h2 id="_1、javascript-有哪些数据类型-它们的区别" tabindex="-1"><a class="header-anchor" href="#_1、javascript-有哪些数据类型-它们的区别" aria-hidden="true">#</a> 1、JavaScript 有哪些数据类型，它们的区别？</h2><p>八种数据类型：Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt</p><p>其中 Symbol 和 BigInt 是ES6中新增的数据理性：</p><ul><li>Symbol 代表独一无二的且不可变的数据数据类型，主要是为了解决可能出现的全局变量冲突的问题。</li><li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的数据，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数的范围</li></ul><p>这些数据可以分为原始数据类型和引用数据类型：</p><ul><li>栈：原始数据类型（Unde）</li></ul><h2 id="_2、数据类型检测的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_2、数据类型检测的方式有哪些" aria-hidden="true">#</a> 2、数据类型检测的方式有哪些</h2><h2 id="_3、判断数组的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_3、判断数组的方式有哪些" aria-hidden="true">#</a> 3、判断数组的方式有哪些</h2><h2 id="_4、null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#_4、null-和-undefined-的区别" aria-hidden="true">#</a> 4、null 和 undefined 的区别</h2><h2 id="_5、typeof-null-的结果是什么-为什么" tabindex="-1"><a class="header-anchor" href="#_5、typeof-null-的结果是什么-为什么" aria-hidden="true">#</a> 5、typeof null 的结果是什么，为什么</h2><h2 id="_6、intanceof-操作符的实现原理以及实现" tabindex="-1"><a class="header-anchor" href="#_6、intanceof-操作符的实现原理以及实现" aria-hidden="true">#</a> 6、intanceof 操作符的实现原理以及实现</h2><h2 id="_7、为什么-0-1-0-2-0-3-如何让其相等" tabindex="-1"><a class="header-anchor" href="#_7、为什么-0-1-0-2-0-3-如何让其相等" aria-hidden="true">#</a> 7、为什么 0.1 + 0.2 !==0.3 如何让其相等</h2><h2 id="_8、typeof-nan-的结果是什么" tabindex="-1"><a class="header-anchor" href="#_8、typeof-nan-的结果是什么" aria-hidden="true">#</a> 8、typeof NaN 的结果是什么</h2><h2 id="_9、isnan-和-number-isnan-函数的区别" tabindex="-1"><a class="header-anchor" href="#_9、isnan-和-number-isnan-函数的区别" aria-hidden="true">#</a> 9、isNaN 和 Number.isNaN 函数的区别</h2><h2 id="_10、-操作符的强制类型转换规则" tabindex="-1"><a class="header-anchor" href="#_10、-操作符的强制类型转换规则" aria-hidden="true">#</a> 10、== 操作符的强制类型转换规则</h2><figure><img src="https://gitee.com/qdshaonianlang/imgs/raw/master/img/image-20240319094933493.png" alt="image-20240319094933493" tabindex="0" loading="lazy"><figcaption>image-20240319094933493</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>扩展：\nvar a = [];var  b= []\na==b\n底层是如何判断的？\n\n在JavaScript中，当你比较两个空数组时，例如 `var a = []; var b = [];`，使用 `==` 运算符比较它们时，JavaScript会先检查它们是否引用相同的对象。由于 `a` 和 `b` 是两个不同的空数组，它们的引用并不相同，所以 `a == b` 的比较结果将会是 `false`。\n\n在底层判断逻辑中，JavaScript会比较两个对象的引用，而不是对象的内容。因此，即使两个数组的内容相同，只要它们不是同一个对象，使用 `==` 运算符比较时会返回 `false`。如果要比较两个数组的内容是否相同，应该使用其他方法，比如逐个比较数组中的元素。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、其他值到字符串的转换规则" tabindex="-1"><a class="header-anchor" href="#_11、其他值到字符串的转换规则" aria-hidden="true">#</a> 11、其他值到字符串的转换规则</h2><h2 id="_12、其他值到数字值的转换规则" tabindex="-1"><a class="header-anchor" href="#_12、其他值到数字值的转换规则" aria-hidden="true">#</a> 12、其他值到数字值的转换规则</h2><h2 id="_13、" tabindex="-1"><a class="header-anchor" href="#_13、" aria-hidden="true">#</a> 13、</h2>',20),h=[d];function t(l,s){return e(),i("div",null,h)}const u=a(r,[["render",t],["__file","page2.html.vue"]]);export{u as default};
